{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww34360\viewh17600\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
1.4 stretch 
\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2         return new Note(pitch, duration * factor);\
\pard\pardeftab720\sa240\partightenfactor0

\fs32 \cf2 1.5 transpose 
\fs24 \
Documentation comment: \
\pard\pardeftab720\partightenfactor0
\cf2      * Returns a (new) note with the same duration, but transposed by the given interval.\
     * Rests are unaffected.\
     * @param interval the interval to transpose by\
     * @throws IllegalArgumentException if note is transposed beyond valid bounds [c0, g10]\
     * @return the transposed note\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 Code: \
\pard\pardeftab720\partightenfactor0
\cf2 Note result = null;\
if (midiValue == REST_PITCH)\
    result = this;\
else \{\
    int newMidiValue = midiValue + interval;\
    if (newMidiValue == REST_PITCH)\
        newMidiValue++;\
    result = new Note(newMidiValue, duration);\
\}\
return result;\
\pard\pardeftab720\sa240\partightenfactor0

\fs32 \cf2 1.6 toString 
\fs24 \

\fs32 1.7 
\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2     return pitch + " x " + duration;\
\pard\pardeftab720\sa240\partightenfactor0

\fs32 \cf2 Other methods 
\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 /*\
 * @see java.lang.Object#equals(java.lang.Object)\
 */\
@Override\
public boolean equals(Object o) \{\
    if (o instanceof Note) \{\
        Note other = (Note) o;\
        return this.pitch.equals(other.pitch) &&\
                this.midiValue == other.midiValue &&\
                this.duration == other.duration;\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 \} \
\pard\pardeftab720\partightenfactor0
\cf2     return false;\
\}\
@Override\
public int hashCode() \{\
    long durHash = Double.doubleToLongBits(duration);\
    durHash = durHash ^ (durHash >> 32);\
    return (int) (durHash + midiValue);\
\}\
}